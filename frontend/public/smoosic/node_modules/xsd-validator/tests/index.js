"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("../index"));
const chai_1 = require("chai");
const fs = __importStar(require("fs"));
const valid = fs.readFileSync(__dirname + '/invoice.xml'), invalid = fs.readFileSync(__dirname + '/invoice.invalid.xml'), xsd = fs.readFileSync(__dirname + '/isdoc-invoice-6.0.2.xsd');
describe('Valid File', () => {
    const validation = (0, index_1.default)(valid, xsd);
    it('Is Valid', () => (0, chai_1.expect)(validation).to.be.true);
});
describe('Invalid File', () => {
    const validation = (0, index_1.default)(invalid, xsd), errors = [
        `DocumentType': [facet 'enumeration'] The value '9' is not an element of the set {'1', '2', '3', '4', '5', '6', '7'}.`,
        `DocumentType': '9' is not a valid value of the atomic type '{http://isdoc.cz/namespace/2013}DocumentTypeType'.`,
        `UUID': [facet 'pattern'] The value 'AEC4791C-4BA1-451E-A1DC' is not accepted by the pattern '[0-9A-Fa-f]{8}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{4}-[0-9A-Fa-f]{12}'.`,
        `UUID': 'AEC4791C-4BA1-451E-A1DC' is not a valid value of the atomic type '{http://isdoc.cz/namespace/2013}UUIDType'.`,
    ];
    it('Is Invalid', () => {
        (0, chai_1.expect)(validation).to.be.an('array');
        // noinspection SuspiciousTypeOfGuard
        (0, chai_1.expect)(validation).to.satisfy((errs) => errs.every(e => e instanceof Error));
    });
    errors.forEach(e => it(`Error: ${e.split(`': `)[0]} Recognized`, () => (0, chai_1.expect)(validation[0]?.message.includes(e))));
});
